import {getMidiKey} from "@/utils/getMidiKey.ts";
type TestCase = [number, { notes: string[], octave: number }];
const testCases: TestCase[] = [
    [0, { notes: ["C"], octave: -1 }],
    [1, { notes: ["C#", "Db"], octave: -1 }],
    [2, { notes: ["D"], octave: -1 }],
    [3, { notes: ["D#", "Eb"], octave: -1 }],
    [4, { notes: ["E"], octave: -1 }],
    [5, { notes: ["F"], octave: -1 }],
    [6, { notes: ["F#", "Gb"], octave: -1 }],
    [7, { notes: ["G"], octave: -1 }],
    [8, { notes: ["G#", "Ab"], octave: -1 }],
    [9, { notes: ["A"], octave: -1 }],
    [10, { notes: ["A#", "Bb"], octave: -1 }],
    [11, { notes: ["B"], octave: -1 }],
    [12, { notes: ["C"], octave: 0 }],
    [13, { notes: ["C#", "Db"], octave: 0 }],
    [14, { notes: ["D"], octave: 0 }],
    [15, { notes: ["D#", "Eb"], octave: 0 }],
    [16, { notes: ["E"], octave: 0 }],
    [17, { notes: ["F"], octave: 0 }],
    [18, { notes: ["F#", "Gb"], octave: 0 }],
    [19, { notes: ["G"], octave: 0 }],
    [20, { notes: ["G#", "Ab"], octave: 0 }],
    [21, { notes: ["A"], octave: 0 }],
    [22, { notes: ["A#", "Bb"], octave: 0 }],
    [23, { notes: ["B"], octave: 0 }],
    [24, { notes: ["C"], octave: 1 }],
    [25, { notes: ["C#", "Db"], octave: 1 }],
    [26, { notes: ["D"], octave: 1 }],
    [27, { notes: ["D#", "Eb"], octave: 1 }],
    [28, { notes: ["E"], octave: 1 }],
    [29, { notes: ["F"], octave: 1 }],
    [30, { notes: ["F#", "Gb"], octave: 1 }],
    [31, { notes: ["G"], octave: 1 }],
    [32, { notes: ["G#", "Ab"], octave: 1 }],
    [33, { notes: ["A"], octave: 1 }],
    [34, { notes: ["A#", "Bb"], octave: 1 }],
    [35, { notes: ["B"], octave: 1 }],
    [36, { notes: ["C"], octave: 2 }],
    [37, { notes: ["C#", "Db"], octave: 2 }],
    [38, { notes: ["D"], octave: 2 }],
    [39, { notes: ["D#", "Eb"], octave: 2 }],
    [40, { notes: ["E"], octave: 2 }],
    [41, { notes: ["F"], octave: 2 }],
    [42, { notes: ["F#", "Gb"], octave: 2 }],
    [43, { notes: ["G"], octave: 2 }],
    [44, { notes: ["G#", "Ab"], octave: 2 }],
    [45, { notes: ["A"], octave: 2 }],
    [46, { notes: ["A#", "Bb"], octave: 2 }],
    [47, { notes: ["B"], octave: 2 }],
    [48, { notes: ["C"], octave: 3 }],
    [49, { notes: ["C#", "Db"], octave: 3 }],
    [50, { notes: ["D"], octave: 3 }],
    [51, { notes: ["D#", "Eb"], octave: 3 }],
    [52, { notes: ["E"], octave: 3 }],
    [53, { notes: ["F"], octave: 3 }],
    [54, { notes: ["F#", "Gb"], octave: 3 }],
    [55, { notes: ["G"], octave: 3 }],
    [56, { notes: ["G#", "Ab"], octave: 3 }],
    [57, { notes: ["A"], octave: 3 }],
    [58, { notes: ["A#", "Bb"], octave: 3 }],
    [59, { notes: ["B"], octave: 3 }],
    [60, { notes: ["C"], octave: 4 }],
    [61, { notes: ["C#", "Db"], octave: 4 }],
    [62, { notes: ["D"], octave: 4 }],
    [63, { notes: ["D#", "Eb"], octave: 4 }],
    [64, { notes: ["E"], octave: 4 }],
    [65, { notes: ["F"], octave: 4 }],
    [66, { notes: ["F#", "Gb"], octave: 4 }],
    [67, { notes: ["G"], octave: 4 }],
    [68, { notes: ["G#", "Ab"], octave: 4 }],
    [69, { notes: ["A"], octave: 4 }],
    [70, { notes: ["A#", "Bb"], octave: 4 }],
    [71, { notes: ["B"], octave: 4 }],
    [72, { notes: ["C"], octave: 5 }],
    [73, { notes: ["C#", "Db"], octave: 5 }],
    [74, { notes: ["D"], octave: 5 }],
    [75, { notes: ["D#", "Eb"], octave: 5 }],
    [76, { notes: ["E"], octave: 5 }],
    [77, { notes: ["F"], octave: 5 }],
    [78, { notes: ["F#", "Gb"], octave: 5 }],
    [79, { notes: ["G"], octave: 5 }],
    [80, { notes: ["G#", "Ab"], octave: 5 }],
    [81, { notes: ["A"], octave: 5 }],
    [82, { notes: ["A#", "Bb"], octave: 5 }],
    [83, { notes: ["B"], octave: 5 }],
    [84, { notes: ["C"], octave: 6 }],
    [85, { notes: ["C#", "Db"], octave: 6 }],
    [86, { notes: ["D"], octave: 6 }],
    [87, { notes: ["D#", "Eb"], octave: 6 }],
    [88, { notes: ["E"], octave: 6 }],
    [89, { notes: ["F"], octave: 6 }],
    [90, { notes: ["F#", "Gb"], octave: 6 }],
    [91, { notes: ["G"], octave: 6 }],
    [92, { notes: ["G#", "Ab"], octave: 6 }],
    [93, { notes: ["A"], octave: 6 }],
    [94, { notes: ["A#", "Bb"], octave: 6 }],
    [95, { notes: ["B"], octave: 6 }],
    [96, { notes: ["C"], octave: 7 }],
    [97, { notes: ["C#", "Db"], octave: 7 }],
    [98, { notes: ["D"], octave: 7 }],
    [99, { notes: ["D#", "Eb"], octave: 7 }],
    [100, { notes: ["E"], octave: 7 }],
    [101, { notes: ["F"], octave: 7 }],
    [102, { notes: ["F#", "Gb"], octave: 7 }],
    [103, { notes: ["G"], octave: 7 }],
    [104, { notes: ["G#", "Ab"], octave: 7 }],
    [105, { notes: ["A"], octave: 7 }],
    [106, { notes: ["A#", "Bb"], octave: 7 }],
    [107, { notes: ["B"], octave: 7 }],
    [108, { notes: ["C"], octave: 8 }],
    [109, { notes: ["C#", "Db"], octave: 8 }],
    [110, { notes: ["D"], octave: 8 }],
    [111, { notes: ["D#", "Eb"], octave: 8 }],
    [112, { notes: ["E"], octave: 8 }],
    [113, { notes: ["F"], octave: 8 }],
    [114, { notes: ["F#", "Gb"], octave: 8 }],
    [115, { notes: ["G"], octave: 8 }],
    [116, { notes: ["G#", "Ab"], octave: 8 }],
    [117, { notes: ["A"], octave: 8 }],
    [118, { notes: ["A#", "Bb"], octave: 8 }],
    [119, { notes: ["B"], octave: 8 }],
    [120, { notes: ["C"], octave: 9 }],
    [121, { notes: ["C#", "Db"], octave: 9 }],
    [122, { notes: ["D"], octave: 9 }],
    [123, { notes: ["D#", "Eb"], octave: 9 }],
    [124, { notes: ["E"], octave: 9 }],
    [125, { notes: ["F"], octave: 9 }],
    [126, { notes: ["F#", "Gb"], octave: 9 }],
    [127, { notes: ["G"], octave: 9 }],
];

describe("getMidiKey", () => {
    it.each<TestCase>(testCases)(
        "should return the correct note names and octave for MIDI key %i",
        (byte, expected) => {
            const result = getMidiKey(byte);
            expect(result).toEqual(expected);
        }
    );
    it('should throw an error if the MIDI key is less than 0', () => {
        expect(() => getMidiKey(-1)).toThrow('Invalid MIDI key: must be between 0 and 127');
    })
    it('should throw an error if the MIDI key is greater than 127', () => {
        expect(() => getMidiKey(128)).toThrow('Invalid MIDI key: must be between 0 and 127');
    })
});
